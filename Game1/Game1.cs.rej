diff a/Game1/Game1.cs b/Game1/Game1.cs	(rejected hunks)
@@ -11,8 +11,8 @@
     {
         private GraphicsDeviceManager graphics;
         private SpriteBatch spriteBatch;
-        private List<GameObject> objects = new List<GameObject>();
-        private List<Vector2> StartPositions = new List<Vector2>();
+        private GameObject Ball;
+        private Map1 map;
         public Game1()
         {
             graphics = new GraphicsDeviceManager(this);
@@ -30,23 +30,13 @@
         protected override void LoadContent()
         {
             spriteBatch = new SpriteBatch(GraphicsDevice);
-            var Ballinfo = new InfoBall
+            map = new Map1(Content);
+            Ball = new Ball(Content)
             {
-                Texture = Content.Load<Texture2D>("redball"),
-                scale = 0.08f,
-                HeightTexture = 512,
-                WidthTexture = 512,
+                StartPosition = map.StartPositionBall,
             };
-            StartPositions.Add(new Vector2(50, 50));
-            StartPositions.Add(new Vector2(50, 200));
-            objects.Add(new Balls(Ballinfo)
-            {
-                Position = StartPositions[0],
-            });
-            objects.Add(new Balls(Ballinfo)
-            {
-                Position = StartPositions[1],
-            });
+
+            
             // TODO: use this.Content to load your game content here
         }
         protected override void UnloadContent()
@@ -57,49 +47,26 @@
         {
             if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                 Exit();
-            
-            objects[0].Position += new Vector2(0.05f, 0) * gameTime.ElapsedGameTime.Milliseconds;
-            objects[1].Position += new Vector2(0.05f, -0.05f) * gameTime.ElapsedGameTime.Milliseconds;
+            Ball.Position += new Vector2(0.05f, -0.05f) * gameTime.ElapsedGameTime.Milliseconds;
+
+            map.Update(gameTime,Ball);
 
-            if (Hascollisions(objects[0]))
+            if (map.Hascollisions(Ball))
             {
-                objects[0].Position = StartPositions[0];
-                objects[1].Position = StartPositions[1];
+                map.StartPositionObjectsofMap();
+                Ball.Position = map.StartPositionBall;
             }
-
-
             base.Update(gameTime);
         }
         protected override void Draw(GameTime gameTime)
         {
             GraphicsDevice.Clear(Color.Gray);
             spriteBatch.Begin();
-            objects[0].Draw(spriteBatch);
-            objects[1].Draw(spriteBatch);
+            map.Draw(spriteBatch);
+            Ball.Draw(spriteBatch);
             spriteBatch.End();
 
             base.Draw(gameTime);
         }
-        public bool Hascollisions(GameObject obj)
-        {
-            if (obj is RoundObject)
-                if(Hascollisions((RoundObject)obj))
-                    return true;
-            return false;
-        }
-        public bool Hascollisions(RoundObject obj)
-        {
-            foreach (RoundObject Obj in objects.OfType<RoundObject>())
-            {
-                if (obj != Obj)
-                {
-                    double a = Math.Sqrt((Obj.PositionCenter.X - obj.PositionCenter.X) * (Obj.PositionCenter.X - obj.PositionCenter.X) +
-                    (Obj.PositionCenter.Y - obj.PositionCenter.Y) * (Obj.PositionCenter.Y - obj.PositionCenter.Y));
-                    if (a < (Obj.Radius + obj.Radius))
-                        return true;
-                }
-            }
-            return false;
-        }
     }
 }
\ No newline at end of file
